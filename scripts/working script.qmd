---
title: "Function with Loops"
author: "Lauren Puffer and Kaitlin Castor"
format: html
editor: visual
---

## Load packages

```{r}
library(tidyverse)
library(here)
library(janitor)
library(ggplot2)
```

## Create Data Frame

```{r}
flow_volume <- runif(min=0, max=30, n=100)
stage <- runif(min=1, max=15, n=100)
df <- data.frame(flow_volume = flow_volume, stage = stage)
```

## Import Function (includes error checking)

```{r}
predict_safety <- function(flow_volume, stage) {
  
  
  # Check for NA or non-numeric values
  if (is.na(flow_volume) | is.na(stage) | !is.numeric(flow_volume) | !is.numeric(stage)) {
    return(list(
      prediction = NA, 
      message = "Invalid input: flow_volume or stage is missing or not numeric"
    ))
  }
  
  #write error codes for uneven lengths of values
  if (length(flow_volume) != length(stage)) {
    return("Number of flow volume values is not equal to number of stage values.")
  }
  
  # Model coefficients
  intercept <- -18.1
  velocity_coef <- 8.35
  
  #calculate velocity  
  velocity_ft_s <- flow_volume / stage  

  
  # Calculate the log-odds (linear predictor)
  log_odds <- intercept + velocity_coef * velocity_ft_s
  
  # Convert log-odds to probability using the logistic function
  prob <- 1 / (1 + exp(-log_odds))
  
  # Predict safety: if prob > 0.5, predict unsafe (1), else safe (0)
  if (prob > 0.5) {
    prediction <- 1
    message <- "According to our model the water is not safe to swim in."
  } else {
    prediction <- 0
    message <- "According to our model the water is safe to swim in."
  }
  
  # Return the prediction and message
  return(list(prediction = prediction, message = message))
  
}
```

## Test function

```{r}
predict_safety(20, 3)
```

## For loop

```{r}

#make another column in df to store prediction and message
predictions <- vector("numeric", length = nrow(df))
messages <- vector("character", length = nrow(df))

#use for loop to pas each row in the dataframe through the function
for (i in 1:nrow(df)) {
  result <- predict_safety(df$flow_volume[i], df$stage[i])
  predictions[i] <- result$prediction
  messages[i] <- result$message
}

#add the results as new columns to the dataframe
df$prediction <- predictions
df$message <- messages

```

## Graph Results

```{r}
#create vector with total 1's and zeros

bar_plot <- ggplot(df, aes(y = prediction, color = prediction)) + 
  geom_bar()
```

## Pmap

```{r}
#use pmap to loop with function
safety_pmap = pmap(list(flow_volume = df$flow_volume, stage = df$stage), predict_safety)

safety_pmap = as.data.frame(df, col.names = df$)

#put results in dataframe 
saefty_pmap_df = as.data.frame(safety_pmap, col.names= c(prediction, message))

```
